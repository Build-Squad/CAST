pipeline {
    agent {
            kubernetes {
      defaultContainer 'jnlp'
      yaml """
apiVersion: v1
kind: Pod
metadata:
labels:
  name: agentes
spec:
  # Use service account that can deploy to all namespaces
  serviceAccountName: jenkins
  containers:
  - name: migrate
    image: migrate/migrate
    command:
    - cat
    tty: true
  - name: brudbuntu
    image: bam.brud.local:6000/brudtech/brudbuntu:v1.6
    command:
    - cat
    tty: true
    volumeMounts:
    - mountPath: /var/run/docker.sock
      name: docker-sock
  volumes:
    - name: docker-sock
      hostPath:
        path: /var/run/docker.sock
"""
  }
    }
    environment {
        DB_USERNAME = credentials('db-un-voting-db')
        DB_PASSWORD = credentials('db-userp-voting')
        IPFS_KEY = credentials('db-ipfskey-voting')
        IPFS_SECRET = credentials('ipfs-secrets-voting')
        FLOW_URL = credentials('db-flowurl-voting')
        tag = sh(returnStdout: true, script: "git rev-parse --short=7 HEAD").trim()
    }
    
//--------------------------------------------------------------------------------------------------------------------------------
// TEST
//--------------------------------------------------------------------------------------------------------------------------------
    stages {       
        stage('SIMPLE TEST') {
        steps {
                container('migrate') {
                script {
                     sh 'echo "you will need to run  go test -v ./..."'   
                  }
                }
            }
        }


//--------------------------------------------------------------------------------------------------------------------------------
// CLONING FLOW BACKEND - CREATE NEW ENVIRONMENT - TAGGING TO DELETION
//--------------------------------------------------------------------------------------------------------------------------------
        stage('CREATING TEMPORARY ENVIRONMENT') {
            steps {
                container('brudbuntu') {
                script {
                ghprbPullId = env.CHANGE_ID
                sshagent(credentials: ['brud-ssh']) {
                                    sh '''
                                        [ -d ~/.ssh ] || mkdir ~/.ssh && chmod 0700 ~/.ssh
                                        ssh-keyscan -t rsa,dsa github.com >> ~/.ssh/known_hosts
                                        git config --global user.email "jenkins@brudfyi.com"
                                        git config --global user.name "Jenkins" 
                                        git clone git@github.com:brudfyi/flow-voting-tool.git
                                    '''
                                           }
                      echo "----------------------------------------------------------------------"
                      echo "-------------------MIGRATIONS-----------------------------------------"
                      echo "----------------------------------------------------------------------"
                      dir("flow-voting-tool") {
                          sh 'migrate -path ./migrations -database "postgres://admin:Brud2022@192.168.102.134:30574/voting-tool?sslmode=disable" -verbose up'
                      } 
                      echo "----------------------------------------------------------------------"
                      echo "-------------------END MIGRATION--------------------------------------"
                      echo "----------------------------------------------------------------------"
                      echo "----------------------------------------------------------------------"
                      echo "-------------------BUILDING FRONTEND IMAGES FROM REPO-----------------"
                      echo "----------------------------------------------------------------------"
                      echo ':::::BUILDING FRONTEND IMAGES FROM REPO:::::'
                      sh "sed -i 's/REPLACE_NAMESPACE/${tag}/g' Dockerfile.vars"
                      sh 'docker build . --file=Dockerfile.vars -t bam.brud.local:6000/brudtech/flow-voting-tool-frontend:${tag}-vt'
                      sh 'docker push bam.brud.local:6000/brudtech/flow-voting-tool-frontend:${tag}-vt'
                      echo "----------------------------------------------------------------------"
                      echo "-------------------BUILDING FRONTEND IMAGES END ----------------------"
                      echo "----------------------------------------------------------------------"
                      echo "----------------------------------------------------------------------"
                      echo "-------------------BUILDING BACKEND IMAGES ---------------------------"
                      echo "----------------------------------------------------------------------"
                      dir("flow-voting-tool") {
                          sh 'docker build . -t bam.brud.local:6000/brudtech/flow-voting-tool-backend:${tag}-vt'
                          sh 'docker push bam.brud.local:6000/brudtech/flow-voting-tool-backend:${tag}-vt'
                      }
                      echo "----------------------------------------------------------------------"
                      echo "-------------------BUILDING BACKEND END ------------------------------"
                      echo "----------------------------------------------------------------------"
                      sh "kubectl create namespace ${tag}"
                      sh "mkdir ${tag}"
                      sh "cp template/emulator.yml ${tag} -v"
                      sh "cp template/frontend.yml ${tag} -v"
                      sh "cp template/backend.yml ${tag} -v"
                      sh "cp template/secrets.yml ${tag} -v"
                      sh "sed -i 's/REPLACE_NAMESPACE/${tag}/g' ${tag}/frontend.yml"
                      sh "sed -i 's/REPLACE_TAG/${tag}-vt/g' ${tag}/frontend.yml"
                      sh "sed -i 's/REPLACE_HOST/${tag}/g' ${tag}/frontend.yml"
                      sh "sed -i 's/REPLACE_DELETION_KEY/fvtpr${ghprbPullId}/g' ${tag}/frontend.yml"
                      sh "sed -i 's/REPLACE_DELETION_KEY/fvtpr${ghprbPullId}/g' ${tag}/backend.yml"
                      sh "sed -i 's/REPLACE_DELETION_KEY/fvtpr${ghprbPullId}/g' ${tag}/emulator.yml"
                      sh "sed -i 's/REPLACE_DELETION_KEY/fvtpr${ghprbPullId}/g' ${tag}/secrets.yml"
                      sh "sed -i 's/REPLACE_NAMESPACE/${tag}/g' ${tag}/secrets.yml"
                      sh "sed -i 's/REPLACE_SECRET_NAME/${tag}-secrets/g' ${tag}/secrets.yml"
                      sh "sed -i 's/REPLACE_DB_USERNAME/${DB_USERNAME}/g' ${tag}/secrets.yml"
                      sh "sed -i 's/REPLACE_PASSWORD/${DB_PASSWORD}/g' ${tag}/secrets.yml"
                      sh "sed -i 's/REPLACE_IPFS_KEY/${IPFS_KEY}/g' ${tag}/secrets.yml"
                      sh "sed -i 's/REPLACE_IPFS_SECRET/${IPFS_SECRET}/g' ${tag}/secrets.yml"
                      sh "sed -i 's/REPLACE_FLOW_URL/${FLOW_URL}/g' ${tag}/secrets.yml"
                      sh "sed -i 's/REPLACE_SECRET_NAME/${tag}-secrets/g' ${tag}/backend.yml"
                      sh "sed -i 's/REPLACE_NAMESPACE/${tag}/g' ${tag}/backend.yml"
                      sh "sed -i 's/REPLACE_NAMESPACE/${tag}/g' ${tag}/emulator.yml"
                      sh "sed -i 's/REPLACE_TAG/${tag}-vt/g' ${tag}/backend.yml"
                      sh "sed -i 's/REPLACE_HOST/${tag}/g' ${tag}/backend.yml"
                      sh "cat ${tag}/backend.yml"
                      sh "cat ${tag}/frontend.yml"
                      sh "kubectl apply -n ${tag} -f ./${tag}"
                      sh "kubectl label deployment flow-voting-tool-frontend-dpy deletion=fvtpr${ghprbPullId} -n ${tag}"
                      sh "kubectl get all -n ${tag}"
                withCredentials([string(credentialsId: 'brud-tech-token', variable: 'GITHUB_TOKEN')]) { 
                      sh "curl -s -H \"Authorization: token ${GITHUB_TOKEN}\" -X POST -d '{\"body\": \":point_right: TEMPORAL Ingress URL: https://${tag}-cast.brud.dev \"}' \"https://api.github.com/repos/brudfyi/${env.GIT_URL.tokenize("/")[-1].tokenize(".")[0]}/issues/${ghprbPullId}/comments\""
                                           } 
                                        }//Script
                                    }//Containters
                                }//Steps
                        }//Stage TEM ENV

    }//Stages
}//Pipelines